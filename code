// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract DegenToken is ERC20, Ownable, ERC20Burnable {
    string public shop_iteams;
    constructor(address initialOwner) ERC20("Degen", "DGN") Ownable(initialOwner) {
    shop_iteams = "The store iteams are 1.Mint a token 2.Buy a Book(10)  3.Buy a Toy(15) 4.Buy a Car(20)";
    }
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function burn(uint256 amount) public override {
        require(balanceOf(msg.sender) >= amount, "Insufficient Balance");
        _burn(msg.sender, amount);
    }

    function shop(uint256 choice) public {
        if(choice == 1){
            _mint(msg.sender, 1);
        }
        if (balanceOf(msg.sender) < 100) {
            revert("Insufficient Balance");
        }
        assert(choice > 1 && choice <= 4);
        _burn(msg.sender, choice * 5);
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function DoubleDivideMint(uint256 a, uint256 b) public {
        uint256 c = a / b;
        uint256 d = c / b;

        _mint(msg.sender, d);
    }

    function getBalance() public view returns (uint256) {
        return balanceOf(msg.sender);
    }
}
